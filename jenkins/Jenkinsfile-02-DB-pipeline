pipeline {
    agent any
    parameters {
        string(name: "BUILD_ID", defaultValue: "", description: "The build tag from the triggering pipeline")
    }
    environment {
        POSTGRES_DB_DEVADOPT = credentials("POSTGRES_DB_DEVADOPT")
        POSTGRES_PASSWORD_DEVADOPT = credentials("POSTGRES_PASSWORD_DEVADOPT")
    }
    stages {
        stage("Build Docker DB Image") {
            steps {
                dir("database") {
                    echo "Right before Building the image script"
                    script {
                        echo "INSIDE THE DB PIPELINE"
                        echo "Received Build Tag: ${params.BUILD_ID}"
                        sh "ls"
                        sh """
                        ls
                        pwd

                        # Build Docker image with environment variables
                        docker build \
                            --build-arg POSTGRES_DB=\$POSTGRES_DB_DEVADOPT \
                            --build-arg POSTGRES_PASSWORD=\$POSTGRES_PASSWORD_DEVADOPT \
                            -t customhaven/devadopt-db:${params.BUILD_ID} .
                        """
                        // Save the image ID to a variable for use in later stage
                        env.DOCKER_IMAGE_DB = "customhaven/devadopt-db:${params.BUILD_ID}"
                    }
                }
            }
        }
        stage("Push Docker DB Image") {
            steps {
                script {
                    dir("database") {
                        docker.withRegistry("", "dockerhub") {
                            // using the env
                            sh "docker push ${env.DOCKER_IMAGE_DB}"
                        }
                    }
                }
            }
        }
        stage("Verify Image") {
            steps {
                script {
                    sh "docker images"
                }
            }
        }
    }
    post {
        always {
            echo "I always run"
        }
        success {
            echo "I run when successful"
        }
        failure {
            echo "I run when failed"
        }
    }
}