pipeline {
    agent any
    parameters {
        booleanParam(name: "RUN_BUILD_APP", defaultValue: false, description: "Run Build APP Stage")
        booleanParam(name: "RUN_DOCKER_MVC", defaultValue: false, description: "Run Docker MVC Pipeline")
        booleanParam(name: "RUN_DOCKER_DB", defaultValue: false, description: "Run Docker DB Pipeline")
        booleanParam(name: "RUN_INFRASTRUCTURE", defaultValue: false, description: "Run Infrastructure")
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
        AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")
        AWS_KEY_PAIR = credentials("AWS_PEM_ID")
        AWS_REGION = "eu-west-2"
        dockerHome = tool "myDocker"
		nodeHome = tool "myNodeJS"
        groovyHome = tool "groovy"
		PATH = "$dockerHome/bin:$nodeHome/bin:$groovyHome/bin:$PATH"
        REMOTE_TRIGGER_TOKEN =  credentials("REMOTE_TRIGGER_TOKEN")
    }
    stages {
        stage("Checkout") {
            steps {
                sh "pwd"
                sh """
                    pwd
                    ls
                    cd ../
                    pwd
                    ls
                    ls -a
                """
                echo "looking in blog_db"
                sh """
                    ls
                    cd server
                    ls
                """
                echo "AWS_SECRET_ACCESS_KEY is set"
                sh "echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
                echo "AWS_ACCESS_KEY_ID"
                sh "echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
                echo "Remote access"
                sh "echo REMOTE_TRIGGER_TOKEN=$REMOTE_TRIGGER_TOKEN"
                echo "Docker Home"
                sh "docker --version"
                echo "We have node"
                sh "node --version"
                echo "We have npm"
                sh "npm --version"
                echo "checking if terraform version is working"
                sh "terraform --version"
                echo "Will kuberenetes WORK!?"
                sh "kubectl version --client"
                echo "AWS in our system?"
                sh "aws --version"
                echo "Azure found?!"
                sh "az --version"
                echo "GCP found"
                sh "gcloud --version"
                echo "ansible found"
                sh "ansible --version"
                echo "Path: $Path"
				echo "Build Number: $env.BUILD_NUMBER"
				echo "Build ID: $env.BUILD_ID"
				echo "Build URL: $env.BUILD_URL"
				echo "Build Tag: $env.BUILD_TAG"
				echo "Job Name: $env.JOB_NAME"
                echo "FINSIHED THESE STEPS"
            }
        }
        stage("Build App") {
            when {
                expression { return params.RUN_BUILD_APP }
            }
            steps {
                script {
                    echo "Conterising App Pipeline"
                    build job: "DevAdopt-Build-App-Pipeline",
                        propagate: true,
                        // wait: true,
                        token: env.REMOTE_TRIGGER_TOKEN
                }
            }
        }
        stage("Database Docker Image") {
            when {
                expression { return params.RUN_DOCKER_DB }
            }
            steps {
                script {
                    echo "Building the Docker Image for the Postgres Database"
                    build job: "DevAdopt-DB-Image-Pipeline"
                        propagate: true,
                        token: env.REMOTE_TRIGGER_TOKEN
                        parameters: [
                            string(name: "BUILD_TAG", value: env.BUILD_TAG)
                        ]
                }
            }
        }
    }
    post {
		always {
			echo "I always run"
		}
		success {
			echo "I run when successful"
		}
		failure {
            script {
                withCredentials([usernamePassword(credentialsId: "e47030c6-b9aa-4279-8df1-5ebe235f9865", usernameVariable: "EMAIL_USER", passwordVariable: "EMAIL_PASS")]) {
                    emailext (
                        to: "mmuseaden@gmail.com,${EMAIL_USER}",
                        subject: "Jenkins Pipeline Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}",
                        body: "The Jenkins pipeline has failed. Please check the build logs for details: ${env.BUILD_URL}",
                        from: "Jenkins Pipeline <${EMAIL_USER}>",
                        mimeType: "text/plain"
                    )
                }
            }
            echo "I run when failed"
		}
	}
}