pipeline {
    agent any
    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/ansible/ansible.cfg"
        ANSIBLE_HOSTS = "${WORKSPACE}/ansible/ansible_hosts"
        DOCKER_IMAGE_MVC = "customhaven/devadopt_mvc:77"
        DOCKER_IMAGE_DB = "customhaven/devadopt_db:72"
    }
    stages {
        stage("Checkout Code") {
            steps {
                checkout scm
            }
        }
        stage("Prepare Ansible") {
            steps {
                script {
                    env.SSH_DIR = "/tmp/.ssh"
                    sh """
                    mkdir -p ${env.SSH_DIR}
                    """
                    withCredentials([file(credentialsId: 'AWS_PEM_ID', variable: 'AWS_PEM_ID_FILE')]) {
                        sh """
                        cp ${AWS_PEM_ID_FILE} ${env.SSH_DIR}/default-ec2.pem
                        chmod 600 ${env.SSH_DIR}/default-ec2.pem
                        sed -i 's|private_key_file=.*|private_key_file=${env.SSH_DIR}/default-ec2.pem|' ${ANSIBLE_CONFIG}
                        """
                    }
                }
            }
        }
        stage("Send Docker-Compose to EC2 Instances") {
            steps {
                script {
                    sh "cat ${ANSIBLE_CONFIG}"
                    withCredentials([file(credentialsId: "DevAdopts_ENV", variable: "ENV_FILE_MVC")]) {
                        def hosts = readFile("${ANSIBLE_HOSTS}").split("\n").findAll { it =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ }

                        // Create a temporary directory for the .env file
                        sh 'mkdir -p /tmp/env_dir'
                        
                        for (host in hosts) {
                            sh """
                            cp ${ENV_FILE_MVC} /tmp/env_dir/.env
                            echo 'IMAGE_MVC_TAG=${DOCKER_IMAGE_MVC}' >> /tmp/env_dir/.env
                            echo 'IMAGE_DB_TAG=${DOCKER_IMAGE_DB}' >> /tmp/env_dir/.env
                            scp -o StrictHostKeyChecking=no -i ${env.SSH_DIR}/default-ec2.pem /tmp/env_dir/.env ec2-user@${host}:/home/ec2-user/
                            scp -o StrictHostKeyChecking=no -i ${env.SSH_DIR}/default-ec2.pem docker-compose.yml ec2-user@${host}:/home/ec2-user/
                            """
                        }
                        
                        // Clean up
                        sh 'rm -rf /tmp/env_dir'
                    }
                }
            }
        }
        stage("Run Docker Install Playbook") {
            steps {
                dir("ansible") {
                    script {
                        sh """
                        ansible-playbook -i ${ANSIBLE_HOSTS} ansible/playbooks/docker-install.yml
                        """
                    }
                }
            }
        }
        stage('Run Docker Compose Playbook') {
            steps {
                dir("ansible") {
                    script {
                        sh """
                        ansible-playbook -i ${ANSIBLE_HOSTS} ansible/playbooks/docker-run.yml
                        """
                    }
                }
            }
        }
    }
}
